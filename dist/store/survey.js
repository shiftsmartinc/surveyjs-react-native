var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observable, action, computed, toJS } from 'mobx';
import { getTriggerType } from '../trigger';
import moment from 'moment';
import { ConditionRunner } from '../condition/conditions';
import QuestionValidator from '../validator';
import { isValueEmpty } from '../utils';
class Page {
    constructor(json, collection, pageIndex, questionNames) {
        this.json = json;
        this.collection = collection;
        this.pageIndex = pageIndex;
        this.questionNames = questionNames;
        this.name = json.name;
        this._visible = json.visible != null ? json.visible : true;
        this.conditionRunner = null;
        if (json.visibleIf) {
            this.conditionRunner = new ConditionRunner('');
            this.conditionRunner.expression = json.visibleIf;
        }
    }
    setVisible(visible) {
        this._visible = visible;
    }
    resetVisible() {
        if (this.conditionRunner) {
            const visible = this.conditionRunner.run(this.collection.conditionValues);
            this._visible = visible;
        }
    }
    get visible() {
        const questionVisible = this.questionNames.some(name => this.collection.questions[name].visible);
        return this._visible && questionVisible;
    }
}
__decorate([
    observable
], Page.prototype, "_visible", void 0);
__decorate([
    action.bound
], Page.prototype, "setVisible", null);
__decorate([
    action.bound
], Page.prototype, "resetVisible", null);
__decorate([
    computed
], Page.prototype, "visible", null);
class Question {
    constructor(json, originalNumber, collection) {
        this.value = null;
        this.error = null;
        this.comment = null;
        this.questions = [];
        this.json = json;
        this.visible = json.visible != null ? json.visible : true;
        this.originalNumber = originalNumber;
        this.collection = collection;
        this.conditionRunner = null;
        if (json.visibleIf) {
            this.conditionRunner = new ConditionRunner('');
            this.conditionRunner.expression = json.visibleIf;
        }
    }
    validate() {
        const questionValidator = new QuestionValidator(this);
        return questionValidator.validate();
    }
    get plainValue() {
        return toJS(this.value);
    }
    setValue(value, comment = null) {
        this.value = value.uri || value;
        if (comment != null) {
            this.comment = comment;
        }
        if (this.collection) {
            this.collection.resetVisible();
            this.collection.regenerateNumbers();
            this.collection.triggers
                .filter(v => v.name === this.json.name && !v.isOnNextPage)
                .forEach(trigger => trigger.check(value));
            if (this.json.type === 'file' && this.collection.apis.onUpload) {
                this.collection.apis.onUpload(value, this);
            }
        }
    }
    setComment(comment) {
        this.comment = comment;
    }
    setVisible(visible) {
        this.visible = visible;
    }
    resetVisible() {
        if (this.conditionRunner) {
            const visible = this.conditionRunner.run(this.collection.conditionValues);
            this.visible = visible;
        }
    }
    setError(error) {
        this.error = error;
    }
    setPage(page) {
        this.page = page;
    }
}
__decorate([
    observable
], Question.prototype, "visible", void 0);
__decorate([
    observable
], Question.prototype, "value", void 0);
__decorate([
    observable
], Question.prototype, "error", void 0);
__decorate([
    observable
], Question.prototype, "comment", void 0);
__decorate([
    observable
], Question.prototype, "number", void 0);
__decorate([
    observable
], Question.prototype, "questions", void 0);
__decorate([
    computed
], Question.prototype, "plainValue", null);
__decorate([
    action.bound
], Question.prototype, "setValue", null);
__decorate([
    action.bound
], Question.prototype, "setComment", null);
__decorate([
    action.bound
], Question.prototype, "setVisible", null);
__decorate([
    action.bound
], Question.prototype, "resetVisible", null);
__decorate([
    action.bound
], Question.prototype, "setError", null);
__decorate([
    action.bound
], Question.prototype, "setPage", null);
export default class Survey {
    constructor(json, apis) {
        this.questions = {};
        this.curPageIndex = 0;
        this.isComplete = false;
        this.pages = [];
        this.triggers = [];
        this.apis = null;
        this.originalNumber = 0;
        this.questionNamesInOrder = [];
        this.onComplete = () => {
            this.isComplete = true;
            if (this.apis.onComplete) {
                this.apis.onComplete(this.results);
            }
        };
        this.parseQuestion = (json, questionNames) => {
            if (json.type === 'panel') {
                json.showTitle = false;
            }
            questionNames.push(json.name);
            if (json.type !== 'html' && json.type !== 'panel') {
                this.questionNamesInOrder.push(json.name);
            }
            const question = new Question(json, this.originalNumber++, this);
            this.questions[json.name] = question;
            if (json.type === 'multipletext') {
                question.questions = json.items.map(itemjson => new Question(itemjson));
            }
        };
        this.initPages = (pagesJson) => {
            this.pages = pagesJson.map((page, pageIndex) => {
                const questionNames = [];
                (page.elements || page.questions).forEach(question => this.parseQuestion(question, questionNames));
                const pageStore = new Page(page, this, pageIndex, questionNames);
                questionNames.forEach((name) => {
                    this.questions[name].setPage(pageStore);
                });
                return pageStore;
            });
        };
        this.regenerateNumbers = () => {
            let count = 1;
            this.questionNamesInOrder.forEach((name) => {
                const question = this.questions[name];
                if (question.visible && question.page.visible) {
                    question.number = count++;
                }
            });
        };
        this.initTriggers = (triggersJson = []) => {
            const owner = {
                doComplete: this.onComplete,
                getObjects: this.triggerGetObjects,
                setTriggerValue: this.setTriggerValue,
            };
            this.triggers = triggersJson.map(json => {
                let TriggerType = getTriggerType(json);
                const trigger = new TriggerType(json);
                trigger.setOwner(owner);
                return trigger;
            });
        };
        this.triggerGetObjects = (pageNames, questionNames) => {
            const pages = this.pages.filter(v => pageNames.indexOf(v.name) !== -1);
            const questions = questionNames.map(v => this.questions[v]);
            return [...pages, ...questions];
        };
        this.apis = apis;
        this.initStoreFromJson(json);
    }
    initStoreFromJson(json) {
        this.initPages(json.pages);
        this.initTriggers(json.triggers);
        this.regenerateNumbers();
    }
    nextPage() {
        const isValidatorFailed = this.currentPageProps.questions.some(question => !question.validate());
        if (isValidatorFailed) {
            return;
        }
        const pageTriggers = this.triggers.filter(v => v.isOnNextPage);
        const curPageQuestionNames = this.pages[this.curPageIndex].questionNames;
        const curPageTriggers = pageTriggers.filter(v => curPageQuestionNames.indexOf(v.name) !== -1);
        curPageTriggers.forEach(trigger => trigger.check(this.questions[trigger.name].value));
        if (this.nextPageIndex !== -1) {
            this.curPageIndex = this.nextPageIndex;
        }
        else {
            this.onComplete();
        }
    }
    prevPage() {
        if (this.prevPageIndex !== -1) {
            this.curPageIndex = this.prevPageIndex;
        }
    }
    resetVisible() {
        Object.keys(this.questions).forEach(name => this.questions[name].resetVisible());
        this.pages.forEach(page => page.resetVisible());
    }
    get prevPageIndex() {
        const reversedPages = this.pages.slice().reverse();
        const page = reversedPages.find(v => v.visible && v.pageIndex < this.curPageIndex);
        return page ? page.pageIndex : -1;
    }
    get nextPageIndex() {
        return this.pages.findIndex(v => v.visible && v.pageIndex > this.curPageIndex);
    }
    get currentPageProps() {
        const page = this.pages.find(v => v.pageIndex === this.curPageIndex);
        const pageProps = {
            name: page.name,
            questions: page.questionNames.map(name => this.questions[name]),
        };
        return pageProps;
    }
    get conditionValues() {
        const values = {};
        Object.keys(this.questions).forEach((name) => {
            values[name] = this.questions[name].value;
        });
        return values;
    }
    get results() {
        const values = {};
        Object.keys(this.questions).forEach(name => {
            const question = this.questions[name];
            const value = question.value;
            if (!isValueEmpty(value)) {
                values[name] = value;
                if (question.json.inputType === 'datetime' || question.json.inputType === 'datetime-local') {
                    values[name] = moment(value).format();
                }
                else if (question.json.inputType === 'date') {
                    values[name] = moment(value).format('YYYY-MM-DD');
                }
                else if (question.json.inputType === 'time') {
                    values[name] = moment(value).format('HH:mm');
                }
            }
            if (question.comment && (question.json.hasComment || question.json.hasOther)) {
                values[`${name}-Comment`] = question.comment;
            }
        });
        return values;
    }
    setTriggerValue(name, value, isVariable) {
        if (!name)
            return;
        if (!isVariable) {
            this.questions[name].setValue(value);
        }
    }
}
__decorate([
    observable
], Survey.prototype, "questions", void 0);
__decorate([
    observable
], Survey.prototype, "curPageIndex", void 0);
__decorate([
    observable
], Survey.prototype, "isComplete", void 0);
__decorate([
    action.bound
], Survey.prototype, "nextPage", null);
__decorate([
    action.bound
], Survey.prototype, "prevPage", null);
__decorate([
    action.bound
], Survey.prototype, "resetVisible", null);
__decorate([
    computed
], Survey.prototype, "prevPageIndex", null);
__decorate([
    computed
], Survey.prototype, "nextPageIndex", null);
__decorate([
    computed
], Survey.prototype, "currentPageProps", null);
__decorate([
    computed
], Survey.prototype, "conditionValues", null);
__decorate([
    computed
], Survey.prototype, "results", null);
__decorate([
    action.bound
], Survey.prototype, "setTriggerValue", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VydmV5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0b3JlL3N1cnZleS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQWlCLE1BQU0sWUFBWSxDQUFDO0FBQzNELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxpQkFBaUIsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV4QztJQVVFLFlBQVksSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsYUFBYTtRQUNwRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRTNELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdB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SzswQ0FHWjtBQUVTO0lBQVQsUUFBUTsyQ0FJUjtBQUVTO0lBQVQsUUFBUTsyQ0FFUjtBQUVTO0lBQVQsUUFBUTs4Q0FRUjtBQUVTO0lBQVQsUUFBUTs2Q0FNUjtBQUVTO0lBQVQsUUFBUTtxQ0F3QlI7QUFrR2E7SUFBYixNQUFNLENBQUMsS0FBSzs2Q0FVWiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUsIGFjdGlvbiwgY29tcHV0ZWQsIHRvSlMgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IGdldFRyaWdnZXJUeXBlLCBTdXJ2ZXlUcmlnZ2VyIH0gZnJvbSAnLi4vdHJpZ2dlcic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBDb25kaXRpb25SdW5uZXIgfSBmcm9tICcuLi9jb25kaXRpb24vY29uZGl0aW9ucyc7XG5pbXBvcnQgUXVlc3Rpb25WYWxpZGF0b3IgZnJvbSAnLi4vdmFsaWRhdG9yJztcbmltcG9ydCB7IGlzVmFsdWVFbXB0eSB9IGZyb20gJy4uL3V0aWxzJztcblxuY2xhc3MgUGFnZSB7XG4gIGNvbGxlY3Rpb247XG4gIG5hbWU7XG4gIEBvYnNlcnZhYmxlIF92aXNpYmxlO1xuICBqc29uO1xuICBxdWVzdGlvbk5hbWVzO1xuICBwYWdlSW5kZXg7XG5cbiAgY29uZGl0aW9uUnVubmVyO1xuXG4gIGNvbnN0cnVjdG9yKGpzb24sIGNvbGxlY3Rpb24sIHBhZ2VJbmRleCwgcXVlc3Rpb25OYW1lcykge1xuICAgIHRoaXMuanNvbiA9IGpzb247XG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvblxuICAgIHRoaXMucGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICAgIHRoaXMucXVlc3Rpb25OYW1lcyA9IHF1ZXN0aW9uTmFtZXM7XG4gICAgdGhpcy5uYW1lID0ganNvbi5uYW1lO1xuICAgIHRoaXMuX3Zpc2libGUgPSBqc29uLnZpc2libGUgIT0gbnVsbCA/IGpzb24udmlzaWJsZSA6IHRydWU7XG5cbiAgICB0aGlzLmNvbmRpdGlvblJ1bm5lciA9IG51bGw7XG4gICAgaWYgKGpzb24udmlzaWJsZUlmKSB7XG4gICAgICB0aGlzLmNvbmRpdGlvblJ1bm5lciA9IG5ldyBDb25kaXRpb25SdW5uZXIoJycpO1xuICAgICAgdGhpcy5jb25kaXRpb25SdW5uZXIuZXhwcmVzc2lvbiA9IGpzb24udmlzaWJsZUlmO1xuICAgIH1cbiAgfVxuXG4gIEBhY3Rpb24uYm91bmQgc2V0VmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgdGhpcy5fdmlzaWJsZSA9IHZpc2libGU7XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHJlc2V0VmlzaWJsZSgpIHtcbiAgICBpZiAodGhpcy5jb25kaXRpb25SdW5uZXIpIHtcbiAgICAgIGNvbnN0IHZpc2libGUgPSB0aGlzLmNvbmRpdGlvblJ1bm5lci5ydW4odGhpcy5jb2xsZWN0aW9uLmNvbmRpdGlvblZhbHVlcyk7XG4gICAgICB0aGlzLl92aXNpYmxlID0gdmlzaWJsZTtcbiAgICB9XG4gIH1cblxuICBAY29tcHV0ZWQgZ2V0IHZpc2libGUoKSB7XG4gICAgY29uc3QgcXVlc3Rpb25WaXNpYmxlID0gdGhpcy5xdWVzdGlvbk5hbWVzLnNvbWUobmFtZSA9PlxuICAgICAgdGhpcy5jb2xsZWN0aW9uLnF1ZXN0aW9uc1tuYW1lXS52aXNpYmxlXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5fdmlzaWJsZSAmJiBxdWVzdGlvblZpc2libGU7XG4gIH1cbn1cblxuY2xhc3MgUXVlc3Rpb24ge1xuICBAb2JzZXJ2YWJsZSB2aXNpYmxlO1xuICBAb2JzZXJ2YWJsZSB2YWx1ZSA9IG51bGw7XG4gIEBvYnNlcnZhYmxlIGVycm9yID0gbnVsbDtcbiAgQG9ic2VydmFibGUgY29tbWVudCA9IG51bGw7XG4gIEBvYnNlcnZhYmxlIG51bWJlcjtcbiAgQG9ic2VydmFibGUgcXVlc3Rpb25zID0gW107XG5cbiAgb3JpZ2luYWxOdW1iZXI7XG4gIGpzb247XG4gIGNvbGxlY3Rpb247XG4gIGNvbmRpdGlvblJ1bm5lcjtcbiAgcGFnZTtcblxuICBjb25zdHJ1Y3Rvcihqc29uLCBvcmlnaW5hbE51bWJlcj8sIGNvbGxlY3Rpb24/KSB7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICB0aGlzLnZpc2libGUgPSBqc29uLnZpc2libGUgIT0gbnVsbCA/IGpzb24udmlzaWJsZSA6IHRydWU7XG4gICAgdGhpcy5vcmlnaW5hbE51bWJlciA9IG9yaWdpbmFsTnVtYmVyO1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5cbiAgICB0aGlzLmNvbmRpdGlvblJ1bm5lciA9IG51bGw7XG4gICAgaWYgKGpzb24udmlzaWJsZUlmKSB7XG4gICAgICB0aGlzLmNvbmRpdGlvblJ1bm5lciA9IG5ldyBDb25kaXRpb25SdW5uZXIoJycpO1xuICAgICAgdGhpcy5jb25kaXRpb25SdW5uZXIuZXhwcmVzc2lvbiA9IGpzb24udmlzaWJsZUlmO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGNvbnN0IHF1ZXN0aW9uVmFsaWRhdG9yID0gbmV3IFF1ZXN0aW9uVmFsaWRhdG9yKHRoaXMpO1xuICAgIHJldHVybiBxdWVzdGlvblZhbGlkYXRvci52YWxpZGF0ZSgpO1xuICB9XG5cbiAgQGNvbXB1dGVkIGdldCBwbGFpblZhbHVlKCkge1xuICAgIHJldHVybiB0b0pTKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgQGFjdGlvbi5ib3VuZCBzZXRWYWx1ZSh2YWx1ZSwgY29tbWVudCA9IG51bGwpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUudXJpIHx8IHZhbHVlO1xuICAgIGlmIChjb21tZW50ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbikge1xuICAgICAgLy8gMi4gY2hlY2sgYWxsIHF1ZXN0aW9ucydzIHZpc2libGVJZlxuICAgICAgdGhpcy5jb2xsZWN0aW9uLnJlc2V0VmlzaWJsZSgpO1xuXG4gICAgICAvLyAzLiByZS1nZW5lcmF0ZSBxdWVzdGlvbiBvcmRlciBudW1iZXJcbiAgICAgIHRoaXMuY29sbGVjdGlvbi5yZWdlbmVyYXRlTnVtYmVycygpO1xuXG4gICAgICAvLyA0LiB0cmlnZ2Vyc1xuICAgICAgdGhpcy5jb2xsZWN0aW9uLnRyaWdnZXJzXG4gICAgICAgIC5maWx0ZXIodiA9PiB2Lm5hbWUgPT09IHRoaXMuanNvbi5uYW1lICYmICF2LmlzT25OZXh0UGFnZSlcbiAgICAgICAgLmZvckVhY2godHJpZ2dlciA9PiB0cmlnZ2VyLmNoZWNrKHZhbHVlKSk7XG5cbiAgICAgIGlmICh0aGlzLmpzb24udHlwZSA9PT0gJ2ZpbGUnICYmIHRoaXMuY29sbGVjdGlvbi5hcGlzLm9uVXBsb2FkKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5hcGlzLm9uVXBsb2FkKHZhbHVlLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHNldENvbW1lbnQoY29tbWVudCkge1xuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHNldFZpc2libGUodmlzaWJsZSkge1xuICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHJlc2V0VmlzaWJsZSgpIHtcbiAgICBpZiAodGhpcy5jb25kaXRpb25SdW5uZXIpIHtcbiAgICAgIGNvbnN0IHZpc2libGUgPSB0aGlzLmNvbmRpdGlvblJ1bm5lci5ydW4odGhpcy5jb2xsZWN0aW9uLmNvbmRpdGlvblZhbHVlcyk7XG4gICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgIH1cbiAgfVxuXG4gIEBhY3Rpb24uYm91bmQgc2V0RXJyb3IoZXJyb3IpIHtcbiAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHNldFBhZ2UocGFnZSkge1xuICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3VydmV5IHtcbiAgb25Db21wbGV0ZShyZXN1bHRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VydmV5IHtcbiAgQG9ic2VydmFibGUgcXVlc3Rpb25zID0ge307XG4gIEBvYnNlcnZhYmxlIGN1clBhZ2VJbmRleCA9IDA7XG4gIEBvYnNlcnZhYmxlIGlzQ29tcGxldGUgPSBmYWxzZTtcblxuICBwYWdlcyA9IFtdO1xuXG4gIHRyaWdnZXJzOiBBcnJheTxTdXJ2ZXlUcmlnZ2VyPiA9IFtdO1xuXG4gIGFwaXM6IElTdXJ2ZXkgPSBudWxsO1xuXG4gIG9yaWdpbmFsTnVtYmVyID0gMDtcblxuICBxdWVzdGlvbk5hbWVzSW5PcmRlciA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGpzb24sIGFwaXMpIHtcbiAgICB0aGlzLmFwaXMgPSBhcGlzO1xuICAgIHRoaXMuaW5pdFN0b3JlRnJvbUpzb24oanNvbik7XG4gIH1cblxuICBpbml0U3RvcmVGcm9tSnNvbihqc29uKSB7XG4gICAgdGhpcy5pbml0UGFnZXMoanNvbi5wYWdlcyk7XG4gICAgdGhpcy5pbml0VHJpZ2dlcnMoanNvbi50cmlnZ2Vycyk7XG4gICAgdGhpcy5yZWdlbmVyYXRlTnVtYmVycygpO1xuICB9XG5cbiAgQGFjdGlvbi5ib3VuZCBuZXh0UGFnZSgpIHtcblxuICAgIC8vIHZhbGlkYXRvclxuICAgIGNvbnN0IGlzVmFsaWRhdG9yRmFpbGVkID0gdGhpcy5jdXJyZW50UGFnZVByb3BzLnF1ZXN0aW9ucy5zb21lKFxuICAgICAgcXVlc3Rpb24gPT4gIXF1ZXN0aW9uLnZhbGlkYXRlKClcbiAgICApO1xuICAgIGlmIChpc1ZhbGlkYXRvckZhaWxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGNoZWNrT25QYWdlVHJpZ2dlclxuICAgIGNvbnN0IHBhZ2VUcmlnZ2VycyA9IHRoaXMudHJpZ2dlcnMuZmlsdGVyKHYgPT4gdi5pc09uTmV4dFBhZ2UpO1xuICAgIGNvbnN0IGN1clBhZ2VRdWVzdGlvbk5hbWVzID0gdGhpcy5wYWdlc1t0aGlzLmN1clBhZ2VJbmRleF0ucXVlc3Rpb25OYW1lcztcbiAgICBjb25zdCBjdXJQYWdlVHJpZ2dlcnMgPSBwYWdlVHJpZ2dlcnMuZmlsdGVyKHYgPT4gY3VyUGFnZVF1ZXN0aW9uTmFtZXMuaW5kZXhPZih2Lm5hbWUpICE9PSAtMSk7XG4gICAgY3VyUGFnZVRyaWdnZXJzLmZvckVhY2godHJpZ2dlciA9PiB0cmlnZ2VyLmNoZWNrKHRoaXMucXVlc3Rpb25zW3RyaWdnZXIubmFtZV0udmFsdWUpKTtcblxuICAgIC8vIGRvIG5leHQgcGFnZVxuICAgIGlmICh0aGlzLm5leHRQYWdlSW5kZXggIT09IC0xKSB7XG4gICAgICAvLyB0aGlzLmN1clBhZ2VJbmRleCA9IHRoaXMuY3VyUGFnZUluZGV4ICsgMTtcbiAgICAgIHRoaXMuY3VyUGFnZUluZGV4ID0gdGhpcy5uZXh0UGFnZUluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHByZXZQYWdlKCkge1xuICAgIGlmICh0aGlzLnByZXZQYWdlSW5kZXggIT09IC0xKSB7XG4gICAgICAvLyB0aGlzLmN1clBhZ2VJbmRleCA9IHRoaXMuY3VyUGFnZUluZGV4IC0gMTtcbiAgICAgIHRoaXMuY3VyUGFnZUluZGV4ID0gdGhpcy5wcmV2UGFnZUluZGV4O1xuICAgIH1cbiAgfVxuXG4gIEBhY3Rpb24uYm91bmQgcmVzZXRWaXNpYmxlKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMucXVlc3Rpb25zKS5mb3JFYWNoKG5hbWUgPT4gdGhpcy5xdWVzdGlvbnNbbmFtZV0ucmVzZXRWaXNpYmxlKCkpO1xuICAgIHRoaXMucGFnZXMuZm9yRWFjaChwYWdlID0+IHBhZ2UucmVzZXRWaXNpYmxlKCkpO1xuICB9XG5cbiAgQGNvbXB1dGVkIGdldCBwcmV2UGFnZUluZGV4KCkge1xuICAgIGNvbnN0IHJldmVyc2VkUGFnZXMgPSB0aGlzLnBhZ2VzLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIGNvbnN0IHBhZ2UgPSByZXZlcnNlZFBhZ2VzLmZpbmQodiA9PiB2LnZpc2libGUgJiYgdi5wYWdlSW5kZXggPCB0aGlzLmN1clBhZ2VJbmRleCk7XG4gICAgcmV0dXJuIHBhZ2UgPyBwYWdlLnBhZ2VJbmRleCA6IC0xO1xuICB9XG5cbiAgQGNvbXB1dGVkIGdldCBuZXh0UGFnZUluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLnBhZ2VzLmZpbmRJbmRleCh2ID0+IHYudmlzaWJsZSAmJiB2LnBhZ2VJbmRleCA+IHRoaXMuY3VyUGFnZUluZGV4KTtcbiAgfVxuXG4gIEBjb21wdXRlZCBnZXQgY3VycmVudFBhZ2VQcm9wcygpIHtcbiAgICBjb25zdCBwYWdlID0gdGhpcy5wYWdlcy5maW5kKHYgPT4gdi5wYWdlSW5kZXggPT09IHRoaXMuY3VyUGFnZUluZGV4KTtcblxuICAgIGNvbnN0IHBhZ2VQcm9wcyA9IHtcbiAgICAgIG5hbWU6IHBhZ2UubmFtZSxcbiAgICAgIHF1ZXN0aW9uczogcGFnZS5xdWVzdGlvbk5hbWVzLm1hcChuYW1lID0+IHRoaXMucXVlc3Rpb25zW25hbWVdKSxcbiAgICB9O1xuICAgIHJldHVybiBwYWdlUHJvcHM7XG4gIH1cblxuICBAY29tcHV0ZWQgZ2V0IGNvbmRpdGlvblZhbHVlcygpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fVxuICAgIE9iamVjdC5rZXlzKHRoaXMucXVlc3Rpb25zKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICB2YWx1ZXNbbmFtZV0gPSB0aGlzLnF1ZXN0aW9uc1tuYW1lXS52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgQGNvbXB1dGVkIGdldCByZXN1bHRzKCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMucXVlc3Rpb25zKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3QgcXVlc3Rpb24gPSB0aGlzLnF1ZXN0aW9uc1tuYW1lXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcXVlc3Rpb24udmFsdWU7XG4gICAgICBpZiAoIWlzVmFsdWVFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWVzW25hbWVdID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKHF1ZXN0aW9uLmpzb24uaW5wdXRUeXBlID09PSAnZGF0ZXRpbWUnIHx8IHF1ZXN0aW9uLmpzb24uaW5wdXRUeXBlID09PSAnZGF0ZXRpbWUtbG9jYWwnKSB7XG4gICAgICAgICAgdmFsdWVzW25hbWVdID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbi5qc29uLmlucHV0VHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgdmFsdWVzW25hbWVdID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbi5qc29uLmlucHV0VHlwZSA9PT0gJ3RpbWUnKSB7XG4gICAgICAgICAgdmFsdWVzW25hbWVdID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ0hIOm1tJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIGhhc0NvbW1lbnQgLCBoYXNPdGhlclxuICAgICAgaWYgKHF1ZXN0aW9uLmNvbW1lbnQgJiYgKHF1ZXN0aW9uLmpzb24uaGFzQ29tbWVudCB8fCBxdWVzdGlvbi5qc29uLmhhc090aGVyKSkge1xuICAgICAgICB2YWx1ZXNbYCR7bmFtZX0tQ29tbWVudGBdID0gcXVlc3Rpb24uY29tbWVudDtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBvbkNvbXBsZXRlID0gKCkgPT4ge1xuICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgaWYgKHRoaXMuYXBpcy5vbkNvbXBsZXRlKSB7XG4gICAgICB0aGlzLmFwaXMub25Db21wbGV0ZSh0aGlzLnJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlUXVlc3Rpb24gPSAoanNvbiwgcXVlc3Rpb25OYW1lcykgPT4ge1xuICAgIGlmIChqc29uLnR5cGUgPT09ICdwYW5lbCcpIHtcbiAgICAgIGpzb24uc2hvd1RpdGxlID0gZmFsc2U7XG4gICAgICAvLyBxdWVzdGlvbi5lbGVtZW50cy5mb3JFYWNoKHN1YlF1ZXN0aW9uID0+IHRoaXMucGFyc2VRdWVzdGlvbihzdWJRdWVzdGlvbiwgcXVlc3Rpb25OYW1lcykpO1xuICAgIH1cbiAgICBxdWVzdGlvbk5hbWVzLnB1c2goanNvbi5uYW1lKTtcbiAgICAvLyBxdWVzdGlvbiBodG1sIGlzIGRlc2lnbmVkIGZvciBkaXNwbGF5LCBkbyBub3QgYWRkIG51bWJlciB0byBpdC5cbiAgICBpZiAoanNvbi50eXBlICE9PSAnaHRtbCcgJiYganNvbi50eXBlICE9PSAncGFuZWwnKSB7XG4gICAgICB0aGlzLnF1ZXN0aW9uTmFtZXNJbk9yZGVyLnB1c2goanNvbi5uYW1lKTtcbiAgICB9XG5cblxuICAgIGNvbnN0IHF1ZXN0aW9uID0gbmV3IFF1ZXN0aW9uKFxuICAgICAganNvbixcbiAgICAgIHRoaXMub3JpZ2luYWxOdW1iZXIrKyxcbiAgICAgIHRoaXMsXG4gICAgKTtcbiAgICB0aGlzLnF1ZXN0aW9uc1tqc29uLm5hbWVdID0gcXVlc3Rpb247XG5cbiAgICBpZiAoanNvbi50eXBlID09PSAnbXVsdGlwbGV0ZXh0Jykge1xuICAgICAgcXVlc3Rpb24ucXVlc3Rpb25zID0ganNvbi5pdGVtcy5tYXAoaXRlbWpzb24gPT5cbiAgICAgICAgbmV3IFF1ZXN0aW9uKGl0ZW1qc29uKVxuICAgICAgKTtcbiAgICB9XG5cblxuICAgIC8vIHRoaXMucXVlc3Rpb25zW3F1ZXN0aW9uLm5hbWVdID0ge1xuICAgIC8vICAganNvbjogcXVlc3Rpb24sXG4gICAgLy8gICB2aXNpYmxlOiBxdWVzdGlvbi52aXNpYmxlLFxuICAgIC8vICAgdmFsdWU6IG51bGwsXG4gICAgLy8gICBvcmlnaW5hbE51bWJlcjogdGhpcy5vcmlnaW5hbE51bWJlcisrLFxuICAgIC8vICAgY29tbWVudDogbnVsbCxcbiAgICAvLyAgIGVycm9yOiBudWxsLFxuICAgIC8vIH07XG4gIH07XG5cbiAgaW5pdFBhZ2VzID0gKHBhZ2VzSnNvbikgPT4ge1xuICAgIHRoaXMucGFnZXMgPSBwYWdlc0pzb24ubWFwKChwYWdlLCBwYWdlSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXN0aW9uTmFtZXMgPSBbXTtcbiAgICAgIChwYWdlLmVsZW1lbnRzIHx8IHBhZ2UucXVlc3Rpb25zKS5mb3JFYWNoKHF1ZXN0aW9uID0+IHRoaXMucGFyc2VRdWVzdGlvbihxdWVzdGlvbiwgcXVlc3Rpb25OYW1lcykpO1xuICAgICAgLy8gcmV0dXJuIHtcbiAgICAgIC8vICAgcGFnZUluZGV4LFxuICAgICAgLy8gICBxdWVzdGlvbk5hbWVzLFxuICAgICAgLy8gICBuYW1lOiBwYWdlLm5hbWUsXG4gICAgICAvLyB9O1xuICAgICAgY29uc3QgcGFnZVN0b3JlID0gbmV3IFBhZ2UoXG4gICAgICAgIHBhZ2UsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHBhZ2VJbmRleCxcbiAgICAgICAgcXVlc3Rpb25OYW1lcyxcbiAgICAgICk7XG5cbiAgICAgIHF1ZXN0aW9uTmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICB0aGlzLnF1ZXN0aW9uc1tuYW1lXS5zZXRQYWdlKHBhZ2VTdG9yZSk7XG4gICAgICB9KVxuICAgICAgcmV0dXJuIHBhZ2VTdG9yZTtcbiAgICB9KVxuICB9XG5cbiAgcmVnZW5lcmF0ZU51bWJlcnMgPSAoKSA9PiB7XG4gICAgbGV0IGNvdW50ID0gMTtcbiAgICB0aGlzLnF1ZXN0aW9uTmFtZXNJbk9yZGVyLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXN0aW9uID0gdGhpcy5xdWVzdGlvbnNbbmFtZV07XG4gICAgICBpZiAocXVlc3Rpb24udmlzaWJsZSAmJiBxdWVzdGlvbi5wYWdlLnZpc2libGUpIHtcbiAgICAgICAgcXVlc3Rpb24ubnVtYmVyID0gY291bnQrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGluaXRUcmlnZ2VycyA9ICh0cmlnZ2Vyc0pzb24gPSBbXSkgPT4ge1xuICAgIGNvbnN0IG93bmVyID0ge1xuICAgICAgZG9Db21wbGV0ZTogdGhpcy5vbkNvbXBsZXRlLFxuICAgICAgZ2V0T2JqZWN0czogdGhpcy50cmlnZ2VyR2V0T2JqZWN0cyxcbiAgICAgIHNldFRyaWdnZXJWYWx1ZTogdGhpcy5zZXRUcmlnZ2VyVmFsdWUsXG4gICAgfTtcbiAgICB0aGlzLnRyaWdnZXJzID0gdHJpZ2dlcnNKc29uLm1hcChqc29uID0+IHtcbiAgICAgIGxldCBUcmlnZ2VyVHlwZSA9IGdldFRyaWdnZXJUeXBlKGpzb24pO1xuICAgICAgY29uc3QgdHJpZ2dlciA9IG5ldyBUcmlnZ2VyVHlwZShqc29uKTtcbiAgICAgIHRyaWdnZXIuc2V0T3duZXIob3duZXIpO1xuICAgICAgcmV0dXJuIHRyaWdnZXI7XG4gICAgfSk7XG4gIH1cblxuICB0cmlnZ2VyR2V0T2JqZWN0cyA9IChwYWdlTmFtZXMsIHF1ZXN0aW9uTmFtZXMpID0+IHtcbiAgICBjb25zdCBwYWdlcyA9IHRoaXMucGFnZXMuZmlsdGVyKHYgPT4gcGFnZU5hbWVzLmluZGV4T2Yodi5uYW1lKSAhPT0gLTEpO1xuICAgIGNvbnN0IHF1ZXN0aW9ucyA9IHF1ZXN0aW9uTmFtZXMubWFwKHYgPT4gdGhpcy5xdWVzdGlvbnNbdl0pO1xuICAgIHJldHVybiBbLi4ucGFnZXMsIC4uLnF1ZXN0aW9uc107XG4gIH1cblxuICBAYWN0aW9uLmJvdW5kIHNldFRyaWdnZXJWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIGlzVmFyaWFibGU6IGJvb2xlYW4pIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybjtcbiAgICBpZiAoIWlzVmFyaWFibGUpIHtcbiAgICAgIHRoaXMucXVlc3Rpb25zW25hbWVdLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgLy8gaWYgKGlzVmFyaWFibGUpIHtcbiAgICAvLyAgIHRoaXMuc2V0VmFyaWFibGUobmFtZSwgdmFsdWUpO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICB0aGlzLnNldFZhbHVlKG5hbWUsIHZhbHVlKTtcbiAgICAvLyB9XG4gIH1cblxufVxuXG4iXX0=